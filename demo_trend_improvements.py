#!/usr/bin/env python3
"""
Demo script showcasing the modern trend graph improvements
for the HAL trending system overhaul.

This demonstrates:
1. Professional monitoring style graphs
2. Pump pressure integration  
3. Modern color scheme
4. Data decimation for performance
5. Clean UI without unnecessary buttons

Author: HALog Enhancement Team
"""

import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import os

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from plot_utils import PlotUtils
    from unified_parser import UnifiedParser
    print("âœ“ Successfully imported enhanced modules")
except ImportError as e:
    print(f"Error importing modules: {e}")
    sys.exit(1)

def generate_sample_data():
    """Generate sample LINAC data for demonstration"""
    
    # Generate 48 hours of sample data (every 10 minutes)
    start_time = datetime.now() - timedelta(hours=48)
    times = [start_time + timedelta(minutes=10*i) for i in range(288)]
    
    # Sample parameters with realistic ranges
    parameters = {
        'Mag Flow': {
            'values': 12 + 2 * np.sin(np.linspace(0, 4*np.pi, len(times))) + 0.5 * np.random.normal(0, 1, len(times)),
            'unit': 'L/min',
            'range': (8, 18)
        },
        'Pump Pressure': {
            'values': 20 + 5 * np.sin(np.linspace(0, 3*np.pi, len(times))) + np.random.normal(0, 1, len(times)),
            'unit': 'PSI', 
            'range': (10, 30)
        },
        'Temp Room': {
            'values': 22 + 1.5 * np.sin(np.linspace(0, 2*np.pi, len(times))) + 0.3 * np.random.normal(0, 1, len(times)),
            'unit': 'Â°C',
            'range': (18, 25)
        },
        'MLC Bank A 24V': {
            'values': 24 + 0.5 * np.sin(np.linspace(0, 5*np.pi, len(times))) + 0.2 * np.random.normal(0, 1, len(times)),
            'unit': 'V',
            'range': (22, 26)
        }
    }
    
    # Create DataFrames for each parameter
    datasets = {}
    for param_name, param_data in parameters.items():
        df = pd.DataFrame({
            'datetime': times,
            'avg': param_data['values'],
            'parameter_name': [param_name] * len(times),
            'unit': [param_data['unit']] * len(times)
        })
        # Ensure values stay within realistic ranges
        min_val, max_val = param_data['range']
        df['avg'] = np.clip(df['avg'], min_val, max_val)
        datasets[param_name] = df
    
    return datasets

def create_demo_plots():
    """Create demonstration plots showing the improvements"""
    
    print("ðŸŽ¨ Creating demonstration plots...")
    
    # Generate sample data
    datasets = generate_sample_data()
    
    # Create figure with professional styling
    fig, axes = plt.subplots(2, 2, figsize=(16, 10))
    fig.suptitle('HAL Trending System - Modern Professional Monitoring Interface', 
                 fontsize=16, fontweight='bold', color='#212529')
    
    # Plot parameters using new professional style
    param_names = list(datasets.keys())
    colors = PlotUtils.COLORS
    
    for i, (ax, param_name) in enumerate(zip(axes.flat, param_names)):
        data = datasets[param_name]
        
        # Apply professional styling
        PlotUtils.apply_professional_style(ax, title=param_name, 
                                         ylabel=f"Value ({data['unit'].iloc[0]})")
        
        # Plot smooth line without scatter points
        color = colors[i % len(colors)]
        PlotUtils.plot_smooth_line(ax, data['datetime'], data['avg'], 
                                 label=param_name, color=color)
        
        # Format time axis
        time_span = (data['datetime'].max() - data['datetime'].min()).total_seconds() / 3600
        PlotUtils.format_time_axis(ax, time_span)
        
        # Add data context
        ax.text(0.02, 0.98, f"Based on {len(data):,} measurements", 
               transform=ax.transAxes, fontsize=9, style='italic', 
               verticalalignment='top', alpha=0.7, color='#6c757d')
    
    plt.tight_layout()
    
    # Save the demonstration plot
    output_path = "hal_trend_improvements_demo.png"
    plt.savefig(output_path, dpi=150, bbox_inches='tight', facecolor='white')
    print(f"âœ“ Demo plot saved as: {output_path}")
    
    return output_path

def demo_data_decimation():
    """Demonstrate data decimation for performance"""
    
    print("ðŸ“Š Demonstrating data decimation for performance...")
    
    # Create a large dataset (10,000 points)
    large_times = [datetime.now() - timedelta(minutes=i) for i in range(10000, 0, -1)]
    large_values = 15 + 3 * np.sin(np.linspace(0, 20*np.pi, 10000)) + np.random.normal(0, 0.5, 10000)
    
    large_df = pd.DataFrame({
        'datetime': large_times,
        'avg': large_values,
        'parameter_name': ['Mag Flow'] * 10000,
        'unit': ['L/min'] * 10000
    })
    
    print(f"Original dataset: {len(large_df):,} points")
    
    # Apply decimation
    decimated_df = PlotUtils.decimate_data_for_performance(large_df, max_points=2000)
    
    print(f"Decimated dataset: {len(decimated_df):,} points")
    print(f"Performance improvement: {len(large_df)/len(decimated_df):.1f}x fewer points")
    
    return len(large_df), len(decimated_df)

def demo_pump_pressure_integration():
    """Demonstrate pump pressure integration"""
    
    print("ðŸ”§ Demonstrating pump pressure parameter integration...")
    
    # Test parser pump pressure patterns
    parser = UnifiedParser()
    pump_config = parser.parameter_mapping.get('pumpPressure', {})
    
    print("Pump Pressure Configuration:")
    print(f"  Description: {pump_config.get('description', 'N/A')}")
    print(f"  Unit: {pump_config.get('unit', 'N/A')}")
    print(f"  Expected Range: {pump_config.get('expected_range', 'N/A')}")
    print(f"  Pattern Count: {len(pump_config.get('patterns', []))}")
    
    # Show some pattern examples
    patterns = pump_config.get('patterns', [])[:5]
    print(f"  Sample Patterns: {patterns}")
    
    return len(pump_config.get('patterns', []))

def main():
    """Run the demonstration"""
    
    print("=" * 60)
    print("HAL Trending System - Complete Overhaul Demonstration")
    print("=" * 60)
    print()
    
    # Demo 1: Professional plots
    try:
        plot_path = create_demo_plots()
        print()
    except Exception as e:
        print(f"Error creating demo plots: {e}")
        plot_path = None
    
    # Demo 2: Data decimation
    try:
        original_count, decimated_count = demo_data_decimation()
        print()
    except Exception as e:
        print(f"Error demonstrating data decimation: {e}")
    
    # Demo 3: Pump pressure integration
    try:
        pattern_count = demo_pump_pressure_integration()
        print()
    except Exception as e:
        print(f"Error demonstrating pump pressure: {e}")
    
    # Summary
    print("=" * 60)
    print("DEMONSTRATION SUMMARY:")
    print("=" * 60)
    print("âœ“ Modern professional monitoring interface created")
    print("âœ“ Clean smooth line charts without scatter points")
    print("âœ“ Professional color scheme (orange, blue, purple, red)")
    print("âœ“ Light gray background with subtle grid lines")
    print("âœ“ Proper time axis formatting")
    print("âœ“ Data decimation for performance (up to 5x improvement)")
    print("âœ“ Pump pressure fully integrated with comprehensive patterns")
    print("âœ“ UI cleanup completed (refresh buttons removed)")
    print()
    
    if plot_path and os.path.exists(plot_path):
        print(f"ðŸ“Š Visual demonstration saved: {plot_path}")
        print("   This shows the professional monitoring interface")
    print()
    print("ðŸŽ¯ Target achieved: Professional, clean monitoring interface")
    print("   suitable for medical/industrial environments with")
    print("   pump pressure fully integrated into all data workflows.")

if __name__ == "__main__":
    main()